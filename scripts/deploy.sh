#!/bin/bash

# GPU Genie Manual Deployment Script for AWS CloudShell
# „Åì„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„ÅØAWS„ÇØ„É©„Ç¶„Éâ„Ç∑„Çß„É´‰∏ä„ÅßÂÆüË°å„Åô„Çã„Åì„Å®„ÇíÊÉ≥ÂÆö„Åó„Å¶„ÅÑ„Åæ„Åô

set -e  # „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà„Å´„Çπ„ÇØ„É™„Éó„Éà„ÇíÁµÇ‰∫Ü

# AWS„Éó„É≠„Éï„Ç°„Ç§„É´Ë®≠ÂÆö
AWS_PROFILE_FLAG=""
TERRAFORM_PROFILE_VAR=""
if [ -n "$AWS_PROFILE" ]; then
    AWS_PROFILE_FLAG="--profile $AWS_PROFILE"
    TERRAFORM_PROFILE_VAR="-var=aws_profile=$AWS_PROFILE"
fi

# Ëâ≤‰ªò„Åç„ÅÆÂá∫ÂäõÁî®
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# „É≠„Ç∞Èñ¢Êï∞
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Ë®≠ÂÆöÂ§âÊï∞
ENVIRONMENT=${1:-dev}
NODE_VERSION="18"
TERRAFORM_VERSION="1.5"

log_info "Starting GPU Genie deployment for environment: $ENVIRONMENT"

# „Éó„É≠„Ç∏„Çß„ÇØ„Éà„É´„Éº„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÁ¢∫Ë™ç
if [ ! -f "package.json" ] && [ ! -d "terraform" ]; then
    log_error "„Åì„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„ÅØ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆ„É´„Éº„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅßÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
    exit 1
fi

# ÂøÖË¶Å„Å™„ÉÑ„Éº„É´„ÅÆÁ¢∫Ë™ç
check_requirements() {
    log_info "Checking requirements..."
    
    # Node.jsÁ¢∫Ë™ç
    if ! command -v node &> /dev/null; then
        log_error "Node.js „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇNode.js „Çí„Ç§„É≥„Çπ„Éà„Éº„É´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
        exit 1
    fi
    
    # npmÁ¢∫Ë™ç
    if ! command -v npm &> /dev/null; then
        log_error "npm „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ"
        exit 1
    fi
    
    # AWS CLIÁ¢∫Ë™ç
    if ! command -v aws &> /dev/null; then
        log_error "AWS CLI „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ"
        exit 1
    fi
    
    # TerraformÁ¢∫Ë™ç
    if ! command -v terraform &> /dev/null; then
        log_warning "Terraform „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ„Ç§„É≥„Çπ„Éà„Éº„É´„ÇíË©¶„Åø„Åæ„Åô..."
        install_terraform
    fi
    
    # jqÁ¢∫Ë™ç
    if ! command -v jq &> /dev/null; then
        log_warning "jq „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ„Ç§„É≥„Çπ„Éà„Éº„É´„ÇíË©¶„Åø„Åæ„Åô..."
        sudo yum install -y jq
    fi
    
    log_success "Requirements check completed"
}

# Terraform„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´
install_terraform() {
    log_info "Installing Terraform..."
    
    # Terraform„ÅÆ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Å®„Ç§„É≥„Çπ„Éà„Éº„É´
    cd /tmp
    wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}.0/terraform_${TERRAFORM_VERSION}.0_linux_amd64.zip
    unzip terraform_${TERRAFORM_VERSION}.0_linux_amd64.zip
    sudo mv terraform /usr/local/bin/
    
    # ÂÖÉ„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™„Å´Êàª„Çã
    cd - > /dev/null
    
    log_success "Terraform installed successfully"
}

# „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„Éì„É´„Éâ
build_backend() {
    log_info "Building backend..."
    
    cd backend/lambda
    
    # ‰æùÂ≠òÈñ¢‰øÇ„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´
    log_info "Installing backend dependencies..."
    npm ci
    
    # TypeScript„Éì„É´„Éâ
    log_info "Building TypeScript..."
    npm run build
    
    # „Éá„Éó„É≠„Ç§„É°„É≥„Éà„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆ‰ΩúÊàê
    log_info "Creating deployment package..."
    cd dist
    zip -r ../lambda-function.zip .
    cd ..
    
    log_success "Backend build completed"
    
    # „Éó„É≠„Ç∏„Çß„ÇØ„Éà„É´„Éº„Éà„Å´Êàª„Çã
    cd ../..
}

# „Ç§„É≥„Éï„É©„Çπ„Éà„É©„ÇØ„ÉÅ„É£„ÅÆ„Éá„Éó„É≠„Ç§
deploy_infrastructure() {
    log_info "Deploying infrastructure..."
    
    cd terraform
    
    # Terraform„ÅÆÂàùÊúüÂåñ
    log_info "Initializing Terraform..."
    terraform init
    
    # Terraform„Éó„É©„É≥
    log_info "Creating Terraform plan..."
    terraform plan \
        -var="environment=$ENVIRONMENT" \
        -var="aws_region=$(aws configure get region $AWS_PROFILE_FLAG)" \
        $TERRAFORM_PROFILE_VAR \
        -out=tfplan
    
    # Terraform„ÅÆÈÅ©Áî®
    log_info "Applying Terraform plan..."
    terraform apply tfplan
    
    # Âá∫ÂäõÂÄ§„ÅÆÂèñÂæó
    log_info "Getting Terraform outputs..."
    
    # Âá∫ÂäõÂÄ§„Çí„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
    terraform output -json > ../terraform-outputs.json
    
    # ÂÄãÂà•„ÅÆÂá∫ÂäõÂÄ§„ÇíÂèñÂæó
    export API_GATEWAY_URL=$(terraform output -raw api_gateway_url)
    export S3_BUCKET_NAME=$(terraform output -raw s3_bucket_name)
    export CLOUDFRONT_DOMAIN=$(terraform output -raw cloudfront_domain_name)
    
    # CognitoË®≠ÂÆö„ÅÆÂèñÂæó
    COGNITO_CONFIG=$(terraform output -json cognito_config)
    export COGNITO_USER_POOL_ID=$(echo $COGNITO_CONFIG | jq -r '.user_pool_id')
    export COGNITO_USER_POOL_CLIENT_ID=$(echo $COGNITO_CONFIG | jq -r '.user_pool_client_id')
    export COGNITO_IDENTITY_POOL_ID=$(echo $COGNITO_CONFIG | jq -r '.identity_pool_id')
    export AWS_REGION=$(echo $COGNITO_CONFIG | jq -r '.region')
    
    log_success "Infrastructure deployment completed"
    log_info "API Gateway URL: $API_GATEWAY_URL"
    log_info "CloudFront Domain: $CLOUDFRONT_DOMAIN"
    
    # „Éó„É≠„Ç∏„Çß„ÇØ„Éà„É´„Éº„Éà„Å´Êàª„Çã
    cd ..
}

# LambdaÈñ¢Êï∞„ÅÆ„Éá„Éó„É≠„Ç§
deploy_backend() {
    log_info "Deploying Lambda functions..."
    
    # LambdaÈñ¢Êï∞Âêç„ÅÆ„É™„Çπ„Éà
    FUNCTIONS=(
        "gpu-genie-reservations-$ENVIRONMENT"
        "gpu-genie-get-reservations-$ENVIRONMENT"
        "gpu-genie-update-reservation-$ENVIRONMENT"
        "gpu-genie-users-$ENVIRONMENT"
        "gpu-genie-get-user-$ENVIRONMENT"
    )
    
    for function in "${FUNCTIONS[@]}"; do
        log_info "Updating function: $function"
        aws lambda update-function-code \
            --function-name "$function" \
            --zip-file fileb://backend/lambda/lambda-function.zip \
            --region $(aws configure get region $AWS_PROFILE_FLAG) $AWS_PROFILE_FLAG || log_warning "Function $function not found, skipping..."
    done
    
    log_success "Backend deployment completed"
}

# „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Éì„É´„Éâ
build_frontend() {
    log_info "Building frontend..."
    
    cd frontend
    
    # ‰æùÂ≠òÈñ¢‰øÇ„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´
    log_info "Installing frontend dependencies..."
    npm ci
    
    # Áí∞Â¢ÉÂ§âÊï∞„ÇíË®≠ÂÆö„Åó„Å¶„Éì„É´„Éâ
    log_info "Building frontend with environment variables..."
    export NEXT_PUBLIC_AWS_REGION="$AWS_REGION"
    export NEXT_PUBLIC_API_GATEWAY_URL="$API_GATEWAY_URL"
    export NEXT_PUBLIC_COGNITO_USER_POOL_ID="$COGNITO_USER_POOL_ID"
    export NEXT_PUBLIC_COGNITO_USER_POOL_CLIENT_ID="$COGNITO_USER_POOL_CLIENT_ID"
    export NEXT_PUBLIC_COGNITO_IDENTITY_POOL_ID="$COGNITO_IDENTITY_POOL_ID"
    
    # Next.js„Éì„É´„Éâ
    npm run build
    
    # ÈùôÁöÑ„Ç®„ÇØ„Çπ„Éù„Éº„Éà
    log_info "Exporting static files..."
    npm run export || npm run build
    
    log_success "Frontend build completed"
    
    # „Éó„É≠„Ç∏„Çß„ÇØ„Éà„É´„Éº„Éà„Å´Êàª„Çã
    cd ..
}

# „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„ÅÆ„Éá„Éó„É≠„Ç§
deploy_frontend() {
    log_info "Deploying frontend to S3..."
    
    # S3„Å∏„ÅÆÂêåÊúüÔºà„Ç≠„É£„ÉÉ„Ç∑„É•Ë®≠ÂÆö‰ªò„ÅçÔºâ
    log_info "Syncing files to S3 with cache settings..."
    
    # ÈùôÁöÑ„Ç¢„Çª„ÉÉ„ÉàÔºàÈï∑Êúü„Ç≠„É£„ÉÉ„Ç∑„É•Ôºâ
    aws s3 sync ./frontend/out s3://$S3_BUCKET_NAME \
        --delete \
        --cache-control "public,max-age=31536000,immutable" \
        --exclude "*.html" \
        --exclude "service-worker.js" \
        --exclude "manifest.json" $AWS_PROFILE_FLAG
    
    # HTML„Éï„Ç°„Ç§„É´ÔºàÁü≠Êúü„Ç≠„É£„ÉÉ„Ç∑„É•Ôºâ
    aws s3 sync ./frontend/out s3://$S3_BUCKET_NAME \
        --delete \
        --cache-control "public,max-age=0,must-revalidate" \
        --include "*.html" \
        --include "service-worker.js" \
        --include "manifest.json" $AWS_PROFILE_FLAG
    
    # CloudFront„Ç≠„É£„ÉÉ„Ç∑„É•„ÅÆÁÑ°ÂäπÂåñ
    log_info "Invalidating CloudFront cache..."
    CLOUDFRONT_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Aliases.Items!=null && contains(Aliases.Items, '$CLOUDFRONT_DOMAIN')].Id" --output text $AWS_PROFILE_FLAG)
    
    if [ -z "$CLOUDFRONT_ID" ]; then
        log_warning "CloudFront distribution not found for domain $CLOUDFRONT_DOMAIN. Skipping invalidation."
    else
        aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_ID \
            --paths "/*" $AWS_PROFILE_FLAG
        log_success "CloudFront cache invalidation requested"
    fi
    
    log_success "Frontend deployment completed"
}

# „Çπ„É¢„Éº„ÇØ„ÉÜ„Çπ„Éà
run_smoke_tests() {
    log_info "Running smoke tests..."
    
    # APIÂÅ•ÂÖ®ÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
    log_info "Testing API health endpoint: $API_GATEWAY_URL/health"
    if curl -f "$API_GATEWAY_URL/health" > /dev/null 2>&1; then
        log_success "API health check passed"
    else
        log_warning "API health endpoint not available"
    fi
    
    # „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØ
    FRONTEND_URL="https://$CLOUDFRONT_DOMAIN"
    log_info "Testing frontend accessibility: $FRONTEND_URL"
    if curl -f "$FRONTEND_URL" > /dev/null 2>&1; then
        log_success "Frontend accessibility check passed"
    else
        log_error "Frontend accessibility check failed"
        return 1
    fi
    
    log_success "Smoke tests completed"
}

# „Éá„Éó„É≠„Ç§ÁµêÊûú„ÅÆË°®Á§∫
show_deployment_summary() {
    log_success "üöÄ Deployment completed successfully!"
    echo ""
    echo "=== Deployment Summary ==="
    echo "Environment: $ENVIRONMENT"
    echo "Frontend URL: https://$CLOUDFRONT_DOMAIN"
    echo "API URL: $API_GATEWAY_URL"
    echo ""
    echo "=== Environment Variables Used ==="
    echo "AWS Region: $AWS_REGION"
    echo "Cognito User Pool ID: $COGNITO_USER_POOL_ID"
    echo "Cognito Client ID: $COGNITO_USER_POOL_CLIENT_ID"
    echo "Cognito Identity Pool ID: $COGNITO_IDENTITY_POOL_ID"
    echo ""
    echo "=== Next Steps ==="
    echo "1. „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Å´„Ç¢„ÇØ„Çª„Çπ: https://$CLOUDFRONT_DOMAIN"
    echo "2. API„ÉÜ„Çπ„Éà: $API_GATEWAY_URL"
    echo "3. Cognito„Ç≥„É≥„ÇΩ„Éº„É´„Åß„É¶„Éº„Ç∂„ÉºÁÆ°ÁêÜ"
}

# „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÈñ¢Êï∞
cleanup() {
    log_info "Cleaning up temporary files..."
    rm -f terraform-outputs.json
    rm -f terraform/tfplan
}

# „É°„Ç§„É≥ÂÆüË°åÈñ¢Êï∞
main() {
    # ÈñãÂßãÊôÇÂàª„ÅÆË®òÈå≤
    START_TIME=$(date +%s)
    
    log_info "=== GPU Genie Deployment Script ==="
    log_info "Environment: $ENVIRONMENT"
    log_info "Timestamp: $(date)"
    echo ""
    
    # ÂêÑ„Çπ„ÉÜ„ÉÉ„Éó„ÅÆÂÆüË°å
    check_requirements
    build_backend
    deploy_infrastructure
    deploy_backend
    build_frontend
    deploy_frontend
    run_smoke_tests
    show_deployment_summary
    
    # ÁµÇ‰∫ÜÊôÇÂàª„ÅÆË®àÁÆó
    END_TIME=$(date +%s)
    DURATION=$((END_TIME - START_TIME))
    
    log_success "Total deployment time: ${DURATION} seconds"
    
    # „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
    cleanup
}

# „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
trap 'log_error "Deployment failed! Check the logs above for details."; cleanup; exit 1' ERR

# „Çπ„ÇØ„É™„Éó„Éà„ÅÆÂÆüË°å
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi 