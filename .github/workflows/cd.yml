name: CD

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  NODE_VERSION: '18'
  TERRAFORM_VERSION: '~1.5'

jobs:
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Build Backend
      - name: Install backend dependencies
        working-directory: ./backend/lambda
        run: npm ci

      - name: Build backend
        working-directory: ./backend/lambda
        run: npm run build

      - name: Create Lambda deployment package
        working-directory: ./backend/lambda
        run: |
          mkdir -p deployment
          cp -r dist/* deployment/
          cp package.json deployment/
          cd deployment
          npm ci --only=production
          zip -r ../lambda-function.zip .

      - name: Upload backend build
        uses: actions/upload-artifact@v4
        with:
          name: backend-deployment
          path: ./backend/lambda/lambda-function.zip
          retention-days: 30

      # Build Frontend
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          NEXT_PUBLIC_AWS_REGION: ${{ secrets.AWS_REGION }}
          NEXT_PUBLIC_API_GATEWAY_URL: ${{ secrets.API_GATEWAY_URL }}
          NEXT_PUBLIC_COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID }}
          NEXT_PUBLIC_COGNITO_USER_POOL_CLIENT_ID: ${{ secrets.COGNITO_USER_POOL_CLIENT_ID }}
          NEXT_PUBLIC_COGNITO_IDENTITY_POOL_ID: ${{ secrets.COGNITO_IDENTITY_POOL_ID }}

      - name: Export static frontend
        working-directory: ./frontend
        run: npm run export || npm run build

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-deployment
          path: ./frontend/out
          retention-days: 30

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build
    environment: ${{ needs.build.outputs.environment }}

    outputs:
      api-gateway-url: ${{ steps.terraform-output.outputs.api-gateway-url }}
      s3-bucket-name: ${{ steps.terraform-output.outputs.s3-bucket-name }}
      cloudfront-domain: ${{ steps.terraform-output.outputs.cloudfront-domain }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Download backend deployment
        uses: actions/download-artifact@v4
        with:
          name: backend-deployment
          path: ./terraform/

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -var="environment=${{ needs.build.outputs.environment }}" \
            -var="aws_region=${{ secrets.AWS_REGION }}" \
            -out=tfplan

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply tfplan

      - name: Get Terraform outputs
        id: terraform-output
        working-directory: ./terraform
        run: |
          echo "api-gateway-url=$(terraform output -raw api_gateway_url)" >> $GITHUB_OUTPUT
          echo "s3-bucket-name=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "cloudfront-domain=$(terraform output -raw cloudfront_domain_name)" >> $GITHUB_OUTPUT

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [build, deploy-infrastructure]
    environment: ${{ needs.build.outputs.environment }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download backend deployment
        uses: actions/download-artifact@v4
        with:
          name: backend-deployment
          path: ./

      - name: Deploy Lambda functions
        run: |
          # Update all Lambda functions
          FUNCTIONS=(
            "gpu-genie-reservations-${{ needs.build.outputs.environment }}"
            "gpu-genie-get-reservations-${{ needs.build.outputs.environment }}"
            "gpu-genie-update-reservation-${{ needs.build.outputs.environment }}"
            "gpu-genie-users-${{ needs.build.outputs.environment }}"
            "gpu-genie-get-user-${{ needs.build.outputs.environment }}"
          )
          
          for function in "${FUNCTIONS[@]}"; do
            echo "Updating function: $function"
            aws lambda update-function-code \
              --function-name "$function" \
              --zip-file fileb://lambda-function.zip \
              --region ${{ secrets.AWS_REGION }} || echo "Function $function not found, skipping..."
          done

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [build, deploy-infrastructure]
    environment: ${{ needs.build.outputs.environment }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download frontend deployment
        uses: actions/download-artifact@v4
        with:
          name: frontend-deployment
          path: ./frontend-build

      - name: Deploy to S3
        run: |
          aws s3 sync ./frontend-build s3://${{ needs.deploy-infrastructure.outputs.s3-bucket-name }} \
            --delete \
            --cache-control "public,max-age=31536000,immutable" \
            --exclude "*.html" \
            --exclude "service-worker.js" \
            --exclude "manifest.json"
          
          # HTML files with shorter cache
          aws s3 sync ./frontend-build s3://${{ needs.deploy-infrastructure.outputs.s3-bucket-name }} \
            --delete \
            --cache-control "public,max-age=0,must-revalidate" \
            --include "*.html" \
            --include "service-worker.js" \
            --include "manifest.json"

      - name: Invalidate CloudFront cache
        run: |
          DISTRIBUTION_ID=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?Origins.Items[0].DomainName=='${{ needs.deploy-infrastructure.outputs.s3-bucket-name }}.s3.amazonaws.com'].Id" \
            --output text)
          
          if [ ! -z "$DISTRIBUTION_ID" ]; then
            aws cloudfront create-invalidation \
              --distribution-id "$DISTRIBUTION_ID" \
              --paths "/*"
          fi

  post-deploy:
    name: Post Deploy Tasks
    runs-on: ubuntu-latest
    needs: [build, deploy-infrastructure, deploy-backend, deploy-frontend]
    environment: ${{ needs.build.outputs.environment }}
    if: success()

    steps:
      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          
          # Test API health endpoint
          API_URL="${{ needs.deploy-infrastructure.outputs.api-gateway-url }}"
          
          echo "Testing API health endpoint: $API_URL/health"
          curl -f "$API_URL/health" || exit 1
          
          # Test frontend accessibility
          FRONTEND_URL="https://${{ needs.deploy-infrastructure.outputs.cloudfront-domain }}"
          echo "Testing frontend accessibility: $FRONTEND_URL"
          curl -f "$FRONTEND_URL" || exit 1
          
          echo "âœ… Smoke tests passed!"

      - name: Notify deployment success
        run: |
          echo "ðŸš€ Deployment completed successfully!"
          echo "Frontend URL: https://${{ needs.deploy-infrastructure.outputs.cloudfront-domain }}"
          echo "API URL: ${{ needs.deploy-infrastructure.outputs.api-gateway-url }}"
          echo "Environment: ${{ needs.build.outputs.environment }}"