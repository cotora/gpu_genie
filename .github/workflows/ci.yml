name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  lint-and-test-frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check TypeScript types
        run: npx tsc --noEmit

      - name: Run Prettier check
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_AWS_REGION: us-east-1
          NEXT_PUBLIC_API_GATEWAY_URL: https://dummy-api.execute-api.us-east-1.amazonaws.com/dev
          NEXT_PUBLIC_COGNITO_USER_POOL_ID: dummy
          NEXT_PUBLIC_COGNITO_USER_POOL_CLIENT_ID: dummy
          NEXT_PUBLIC_COGNITO_IDENTITY_POOL_ID: dummy

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ./frontend/.next
          retention-days: 1

  lint-and-test-backend:
    name: Backend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend/lambda

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./backend/lambda/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npx eslint "src/**/*.{ts,js}" --max-warnings 0

      - name: Check TypeScript types
        run: npm run build

      - name: Run Prettier check
        run: npx prettier --check "src/**/*.{ts,js,json}"

      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test
          AWS_REGION: us-east-1
          DYNAMODB_ENDPOINT: http://localhost:8000
          RESERVATIONS_TABLE: gpu-genie-reservations-test
          USERS_TABLE: gpu-genie-users-test
          GPU_SERVERS_TABLE: gpu-genie-gpu-servers-test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: ./backend/lambda/dist
          retention-days: 1

  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.5

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Terraform Validate
        run: terraform validate

      - name: Run tflint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: Init tflint
        run: tflint --init

      - name: Run tflint
        run: tflint

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.dev
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/lambda
          file: ./backend/lambda/Dockerfile.dev
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max